[project]
name = "pytest_cs"
version = "0.7.20"
license = "MIT"
description = "Pytest fixtures for crowdsec"
readme = "README.md"
authors = [
    { email = "marco@crowdsec.net" }
]
requires-python = ">=3.12"
dependencies = [
    "docker>=7.1.0",
    "psutil>=6.1.1",
    "pytest>=8.3.4",
    "pytest-datadir>=1.5.0",
    "pytest-dotenv>=0.5.2",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "trustme>=1.2.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "basedpyright>=1.25.0",
    "ruff>=0.9.3",
    "types-docker>=7.1.0.20241229",
    "types-psutil>=6.1.0.20241221",
    "types-pyyaml>=6.0.12.20241230",
    "types-requests>=2.32.0.20241016",
]

[project.entry-points.'pytest11']
cs = "pytest_cs"

[tool.ruff]

line-length = 120

[tool.ruff.lint]
select = [
  "ALL"
]

ignore = [
    "ANN",      # Missing type annotations
    "ARG001",   # Unused function argument: `...`
    "COM812",   # Trailing comma missing
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    "D203",     # incorrect-blank-line-before-class
    "D213",     # multi-line-summary-second-line
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "ERA001",   # Found commented-out code
    "FIX002",   # Line contains TODO, consider resolving the issue
    "FIX003",   # Line contains XXX, consider resolving the issue
    "N801",     # Class name `log_waiters` should use CapWords convention
    "PLW0603",  # Using the global statement to update `...` is discouraged
    "RET503",   # Missing explicit `return` at the end of function able to return non-`None` value
    "S101",     # Use of 'assert' detected
    "S113",     # Probable use of `requests` call without timeout
    "S603",     # `subprocess` call: check for execution of untrusted input
    "S607",     # Starting a process with a partial executable path
    "SIM105",   # Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`
    "T201",     # `print` found
    "TD001",    # Invalid TODO tag: `XXX`
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link for this TODO
    "TD004",    # Missing colon in TODO
    "TD005",    # Missing issue description after `TODO`
    "TRY002",   # Create your own exception
    "TRY003",   # Avoid specifying long messages outside the exception class
]

[tool.basedpyright]
reportUnknownArgumentType = "none"
reportUnknownParameterType = "none"
reportMissingParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportUnannotatedClassAttribute = "none"
reportCallInDefaultInitializer = "none"
reportUnusedParameter = "none"
reportAny = "none"
reportExplicitAny = "none"
reportUnnecessaryTypeIgnoreComment = "none"
